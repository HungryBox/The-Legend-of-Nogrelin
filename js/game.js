// Generated by CoffeeScript 1.9.3
(function() {
  var GridCodes, GridSpace, Level, Player, canvas, ctx, floorImage, floorReady, hero, keysDown, level, playerImage, playerReady, update, wallImage, wallReady;

  this.playerX = 1;

  this.playerY = 1;

  GridCodes = {
    floor: 0,
    wall: 1,
    door: 2,
    player: "P",
    enemy: "E"
  };

  Player = (function() {
    function Player(name, type) {
      this.name = name;
      this.type = type;
      this.x = this.playerX;
      this.y = this.playerY;
      return;
    }

    Player.prototype.getName = function() {
      return this.name + " the " + this.type;
    };

    Player.prototype.getType = function() {
      return this.type;
    };

    return Player;

  })();

  GridSpace = (function() {
    function GridSpace(type, x, y) {
      this.x = x;
      this.y = y;
      this.type = type;
    }

    GridSpace.prototype.setType = function(type) {
      return this.type = type;
    };

    GridSpace.prototype.checkSpace = function() {
      return this.type;
    };

    return GridSpace;

  })();

  Level = (function() {
    function Level(maxWidth, maxHeight) {
      var x, y;
      this.maxWidth = maxWidth;
      this.maxHeight = maxHeight;
      this.grid = (function() {
        var i, ref, results;
        results = [];
        for (x = i = 0, ref = maxWidth; 0 <= ref ? i < ref : i > ref; x = 0 <= ref ? ++i : --i) {
          results.push((function() {
            var j, ref1, results1;
            results1 = [];
            for (y = j = 0, ref1 = maxHeight; 0 <= ref1 ? j < ref1 : j > ref1; y = 0 <= ref1 ? ++j : --j) {
              results1.push(new GridSpace(GridCodes.wall, x, y));
            }
            return results1;
          })());
        }
        return results;
      })();
    }

    Level.prototype.checkGridSpace = function(x, y) {
      return this.grid[x][y].checkSpace;
    };

    Level.prototype.emptyLevel = function() {
      var i, len, ref, space;
      ref = this.grid;
      for (i = 0, len = ref.length; i < len; i++) {
        space = ref[i];
        if (space.x > 0 && space.x < this.maxWidth) {
          if (space.y > 0 && space.y < this.maxHeight) {
            space.setType(GridCodes.floor);
          }
        }
      }
      return this.grid[this.playerX][this.playerY].setType(GridCodes.player);
    };

    return Level;

  })();

  hero = new Player("Nogrelin", "Death Knight");

  level = new Level(5, 5);

  canvas = document.createElement("canvas");

  ctx = canvas.getContext("2d");

  canvas.width = 640;

  canvas.height = 480;

  document.body.appendChild(canvas);

  floorReady = false;

  floorImage = new Image();

  floorImage.onload = function() {
    floorReady = true;
  };

  floorImage.src = "images/Floor.png";

  wallReady = false;

  wallImage = new Image();

  wallImage.onload = function() {
    wallReady = true;
  };

  wallImage.src = "images/Wall.png";

  playerReady = false;

  playerImage = new Image();

  playerImage.onload = function() {
    playerReady = true;
  };

  playerImage.src = "images/Player.png";

  keysDown = {};

  addEventListener("keydown", function(e) {
    keysDown[e.keyCode] = true;
  }, false);

  addEventListener("keyup", function(e) {
    delete keysDown[e.keyCode];
  }, false);

  update = function() {
    if (38 in keysDown) {
      if (level.checkGridSpace(player.x, player.y - 1) === GridCodes.floor) {
        player.y -= 1;
      }
    }
    if (40 in keysDown) {
      if (level.checkGridSpace(player.x, player.y + 1) === GridCodes.floor) {
        player.y += 1;
      }
    }
    if (37 in keysDown) {
      if (level.checkGridSpace(player.x - 1, player.y) === GridCodes.floor) {
        player.x -= 1;
      }
    }
    if (39 in keysDown) {
      if (level.checkGridSpace(player.x + 1, player.y - 1) === GridCodes.floor) {
        return player.x += 1;
      }
    }
  };

}).call(this);
